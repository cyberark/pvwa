---
# tasks file for pvwa_validateparameters

- name: check EULA is accepted
  fail:
    msg: "You must accept EULA to start the playbook"
  when: (accept_eula|type_debug != 'bool' and accept_eula|lower != "yes") or (accept_eula|type_debug == 'bool' and not accept_eula)

- name: check if pvwa_zip_file_path is undefined
  fail:
    msg: "pvwa_zip_file_path is undefined, failing..."
  when: pvwa_zip_file_path is not defined

- name: check if pvwa_zip_file_path exists
  stat:
    path="{{ pvwa_zip_file_path }}"
  register: st
  delegate_to: localhost

- name: check if package is valid using checksum
  fail:
    msg: "Checksum does not match, please validate your package."
  when: st.stat.checksum != pvwa_sha1_checksum

- fail:
    msg: "{{ pvwa_zip_file_path }} not exists, failing..."
  when: not st.stat.exists

- name: Check if PVWA is already installed (present in appwiz) (64-bit)
  win_reg_stat:
    path: "HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{{ pvwa_guid }}"
    name: Publisher
  register: pvwa_appwiz_info_64bit

- name: Check if PVWA is already installed (present in appwiz) (32-bit)
  win_reg_stat:
    path: "HKLM:\\Software\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{{ pvwa_guid }}"
    name: Publisher
  register: pvwa_appwiz_info_32bit

- name: Set fact if pvwa is already installed
  set_fact:
    pvwa_exists: true
  when: pvwa_appwiz_info_64bit.exists or pvwa_appwiz_info_32bit.exists

- name: Get PVWA Service Info
  win_service:
    name: CyberArk Scheduled Tasks
  register: service_info

- name: Set fact on hardening if correct user running the service
  set_fact:
    pvwa_hardened: true
  when: service_info.exists and service_info.username == ".\\PVWAReportsUser"
